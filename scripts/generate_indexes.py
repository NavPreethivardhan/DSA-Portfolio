#!/usr/bin/env python3
"""
scripts/generate_indexes.py
Scans all Python files in ../solutions/, extracts metadata headers,
and generates ../by_topic.md and ../by_difficulty.md.
"""
import os
import re
from collections import defaultdict

# Paths
ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
SOLUTIONS_DIR = os.path.join(ROOT, "solutions")
BY_TOPIC_PATH = os.path.join(ROOT, "by_topic.md")
BY_DIFF_PATH = os.path.join(ROOT, "by_difficulty.md")

# Regex patterns (unchanged)
META_PATTERN = re.compile(r"^Topic:\s*(.+)$", re.MULTILINE)
DIFF_PATTERN = re.compile(r"^Difficulty:\s*(.+)$", re.MULTILINE)

FILE_LINK_TEMPLATE = "- [{name}]({path})"

def extract_metadata(filepath):
    """Read file and extract Topic and Difficulty metadata."""
    topic = None
    diff = None
    with open(filepath, "r", encoding="utf-8") as f:  # encoding for safety
        content = f.read(1024)  # only read first 1KB for header
    m_topic = META_PATTERN.search(content)
    m_diff = DIFF_PATTERN.search(content)
    if m_topic:
        topic = m_topic.group(1).strip()
    if m_diff:
        diff = m_diff.group(1).strip()
    return topic, diff

def split_topics(topic_field):
    """
    NEW: split a Topic field into a list.
    Accepts comma-separated topics like 'Math, Arrays' and returns ['Math','Arrays'].
    Trims whitespace and drops empty entries; preserves original casing.
    """
    if not topic_field:
        return []
    parts = [t.strip() for t in topic_field.split(",")]
    return [t for t in parts if t]

def scan_solutions():
    """Scan solutions dir and build mapping of topic->files and diff->files."""
    topic_map = defaultdict(list)
    diff_map = defaultdict(list)

    for root, _, files in os.walk(SOLUTIONS_DIR):
        for fname in files:
            if not fname.endswith(".py"):
                continue
            rel_dir = os.path.relpath(root, ROOT)
            rel_path = os.path.join(rel_dir, fname).replace("\\", "/")
            filepath = os.path.join(root, fname)

            topic_field, diff = extract_metadata(filepath)
            display_name = fname

            # CHANGE: fan out to multiple topics if comma-separated
            for topic in split_topics(topic_field):
                topic_map[topic].append((display_name, rel_path))

            # Difficulty behavior UNCHANGED
            if diff:
                diff_map[diff].append((display_name, rel_path))

    return topic_map, diff_map

def write_index(path, title, mapping):
    """Write a markdown index file given a mapping."""
    with open(path, "w", encoding="utf-8") as f:
        f.write(f"# {title}\n\n")
        f.write("Generated by `scripts/generate_indexes.py`\n\n")
        for key in sorted(mapping):
            f.write(f"## {key}\n")
            for name, rel_path in sorted(mapping[key]):
                f.write(f"{FILE_LINK_TEMPLATE.format(name=name, path=rel_path)}\n")
            f.write("\n")

def main():
    topic_map, diff_map = scan_solutions()
    write_index(BY_TOPIC_PATH, "Solutions by Topic", topic_map)
    write_index(BY_DIFF_PATH, "Solutions by Difficulty", diff_map)
    print(f"Generated {BY_TOPIC_PATH} and {BY_DIFF_PATH}")

if __name__ == "__main__":
    main()
